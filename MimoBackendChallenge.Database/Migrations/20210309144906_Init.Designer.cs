// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MimoBackendChallenge.Database;

namespace MimoBackendChallenge.Database.Migrations
{
    [DbContext(typeof(MimoContext))]
    [Migration("20210309144906_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12");

            modelBuilder.Entity("MimoBackendChallenge.Database.Entities.Achievements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("UserId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("MimoBackendChallenge.Database.Entities.Chapters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapters");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CourseId = -1,
                            OrderIndex = 0,
                            Title = "Swift First"
                        },
                        new
                        {
                            Id = -2,
                            CourseId = -1,
                            OrderIndex = 1,
                            Title = "Swift Second"
                        },
                        new
                        {
                            Id = -3,
                            CourseId = -1,
                            OrderIndex = 2,
                            Title = "Swift Third"
                        },
                        new
                        {
                            Id = -4,
                            CourseId = -2,
                            OrderIndex = 0,
                            Title = "Javascript First"
                        },
                        new
                        {
                            Id = -5,
                            CourseId = -2,
                            OrderIndex = 1,
                            Title = "Javascript Second"
                        },
                        new
                        {
                            Id = -6,
                            CourseId = -3,
                            OrderIndex = 0,
                            Title = "C# First"
                        });
                });

            modelBuilder.Entity("MimoBackendChallenge.Database.Entities.Courses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Title = "Swift"
                        },
                        new
                        {
                            Id = -2,
                            Title = "Javascript"
                        },
                        new
                        {
                            Id = -3,
                            Title = "C#"
                        });
                });

            modelBuilder.Entity("MimoBackendChallenge.Database.Entities.Lessons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChapterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ChapterId = -1,
                            OrderIndex = 0,
                            Title = "Swift First Chapter One"
                        },
                        new
                        {
                            Id = -2,
                            ChapterId = -1,
                            OrderIndex = 0,
                            Title = "Swift First Chapter Two"
                        },
                        new
                        {
                            Id = -3,
                            ChapterId = -2,
                            OrderIndex = 0,
                            Title = "Swift Second Chapter One"
                        },
                        new
                        {
                            Id = -4,
                            ChapterId = -2,
                            OrderIndex = 0,
                            Title = "Swift Second Chapter Two"
                        },
                        new
                        {
                            Id = -5,
                            ChapterId = -3,
                            OrderIndex = 0,
                            Title = "Swift Third Chapter One"
                        },
                        new
                        {
                            Id = -6,
                            ChapterId = -4,
                            OrderIndex = 0,
                            Title = "Javascript First Chapter One"
                        },
                        new
                        {
                            Id = -7,
                            ChapterId = -5,
                            OrderIndex = 0,
                            Title = "Javascript Second Chapter One"
                        },
                        new
                        {
                            Id = -8,
                            ChapterId = -6,
                            OrderIndex = 0,
                            Title = "C# First Chapter One"
                        });
                });

            modelBuilder.Entity("MimoBackendChallenge.Database.Entities.Objectives", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<int>("ObjectiveType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Objectives");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Condition = "5",
                            ObjectiveType = 0,
                            Title = "Complete 5 lessons"
                        },
                        new
                        {
                            Id = -2,
                            Condition = "25",
                            ObjectiveType = 0,
                            Title = "Complete 25 lessons"
                        },
                        new
                        {
                            Id = -3,
                            Condition = "60",
                            ObjectiveType = 0,
                            Title = "Complete 50 lessons"
                        },
                        new
                        {
                            Id = -4,
                            Condition = "1",
                            ObjectiveType = 1,
                            Title = "Complete 1 chapter"
                        },
                        new
                        {
                            Id = -5,
                            Condition = "5",
                            ObjectiveType = 1,
                            Title = "Complete 5 chapeters"
                        },
                        new
                        {
                            Id = -6,
                            Condition = "-1",
                            ObjectiveType = 2,
                            Title = "Complete the Swift course"
                        },
                        new
                        {
                            Id = -7,
                            Condition = "-2",
                            ObjectiveType = 2,
                            Title = "Complete the Javascript course"
                        },
                        new
                        {
                            Id = -8,
                            Condition = "-3",
                            ObjectiveType = 2,
                            Title = "Complete the C# course"
                        });
                });

            modelBuilder.Entity("MimoBackendChallenge.Database.Entities.UserLessons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LessonSolvedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LessonStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLessons");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            LessonId = -1,
                            LessonSolvedTime = new DateTime(2021, 3, 9, 14, 49, 5, 639, DateTimeKind.Utc).AddTicks(4431),
                            LessonStartTime = new DateTime(2021, 3, 8, 14, 49, 5, 639, DateTimeKind.Utc).AddTicks(5064),
                            UserId = -1
                        },
                        new
                        {
                            Id = -2,
                            LessonId = -1,
                            LessonSolvedTime = new DateTime(2021, 3, 9, 14, 49, 5, 639, DateTimeKind.Utc).AddTicks(5656),
                            LessonStartTime = new DateTime(2021, 3, 8, 14, 49, 5, 639, DateTimeKind.Utc).AddTicks(5666),
                            UserId = -1
                        },
                        new
                        {
                            Id = -3,
                            LessonId = -2,
                            LessonSolvedTime = new DateTime(2021, 3, 9, 14, 49, 5, 639, DateTimeKind.Utc).AddTicks(5680),
                            LessonStartTime = new DateTime(2021, 3, 8, 14, 49, 5, 639, DateTimeKind.Utc).AddTicks(5681),
                            UserId = -1
                        },
                        new
                        {
                            Id = -4,
                            LessonId = -3,
                            LessonSolvedTime = new DateTime(2021, 3, 9, 14, 49, 5, 639, DateTimeKind.Utc).AddTicks(5683),
                            LessonStartTime = new DateTime(2021, 3, 8, 14, 49, 5, 639, DateTimeKind.Utc).AddTicks(5684),
                            UserId = -2
                        },
                        new
                        {
                            Id = -5,
                            LessonId = -3,
                            LessonSolvedTime = new DateTime(2021, 3, 9, 14, 49, 5, 639, DateTimeKind.Utc).AddTicks(5685),
                            LessonStartTime = new DateTime(2021, 3, 8, 14, 49, 5, 639, DateTimeKind.Utc).AddTicks(5686),
                            UserId = -2
                        });
                });

            modelBuilder.Entity("MimoBackendChallenge.Database.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            UserName = "MimoUser1"
                        },
                        new
                        {
                            Id = -2,
                            UserName = "MimoUser2"
                        });
                });

            modelBuilder.Entity("MimoBackendChallenge.Database.Entities.Achievements", b =>
                {
                    b.HasOne("MimoBackendChallenge.Database.Entities.Objectives", "Objective")
                        .WithMany()
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MimoBackendChallenge.Database.Entities.Users", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MimoBackendChallenge.Database.Entities.Chapters", b =>
                {
                    b.HasOne("MimoBackendChallenge.Database.Entities.Courses", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MimoBackendChallenge.Database.Entities.Lessons", b =>
                {
                    b.HasOne("MimoBackendChallenge.Database.Entities.Chapters", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MimoBackendChallenge.Database.Entities.UserLessons", b =>
                {
                    b.HasOne("MimoBackendChallenge.Database.Entities.Lessons", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MimoBackendChallenge.Database.Entities.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
